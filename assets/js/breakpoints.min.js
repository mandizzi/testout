/* breakpoints.js v1.0 | @ajlkn | MIT licensed */
const breakpoints = (function() {
    "use strict";

    const t = {
        list: null,
        media: {},
        events: [],

        init(breakpointsList) {
            this.list = breakpointsList;
            this.setupEventListeners();
            this.poll(); // Initial poll to set up correct state
        },

        setupEventListeners() {
            const events = ['resize', 'orientationchange', 'load', 'fullscreenchange'];
            events.forEach(event => window.addEventListener(event, this.poll.bind(this)));
        },

        parseQuery(query) {
            let operator, value;
            if (query.startsWith(">=")) {
                operator = "gte";
                value = query.slice(2);
            } else if (query.startsWith("<=")) {
                operator = "lte";
                value = query.slice(2);
            } else if (query.startsWith(">")) {
                operator = "gt";
                value = query.slice(1);
            } else if (query.startsWith("<")) {
                operator = "lt";
                value = query.slice(1);
            } else if (query.startsWith("!")) {
                operator = "not";
                value = query.slice(1);
            } else {
                operator = "eq";
                value = query;
            }
            return [operator, value];
        },

        buildMediaQuery(operator, value) {
            if (!value || !(value in this.list)) return false;

            const [min, max] = this.list[value].map(Number);
            const unit = isNaN(min) ? this.list[value][1] : this.list[value][0].replace(/\d+/g, '');

            let mediaQuery;
            switch (operator) {
                case "gte":
                    mediaQuery = `screen and (min-width: ${min || 0}${unit})`;
                    break;
                case "lte":
                    mediaQuery = `screen and (max-width: ${max || Infinity}${unit})`;
                    break;
                case "gt":
                    mediaQuery = `screen and (min-width: ${min + 1 || 0}${unit})`;
                    break;
                case "lt":
                    mediaQuery = `screen and (max-width: ${max - 1 || -1}${unit})`;
                    break;
                case "not":
                    mediaQuery = `screen and (max-width: ${max - 1 || -1}${unit}), screen and (min-width: ${min + 1 || 0}${unit})`;
                    break;
                case "eq":
                default:
                    mediaQuery = `screen and (min-width: ${min || 0}${unit}) and (max-width: ${max || Infinity}${unit})`;
            }

            return mediaQuery;
        },

        active(query) {
            if (!(query in this.media)) {
                this.media[query] = this.buildMediaQuery(...this.parseQuery(query));
            }

            return this.media[query] && window.matchMedia(this.media[query]).matches;
        },

        on(query, handler) {
            this.events.push({ query, handler, state: false });
            if (this.active(query)) {
                handler();
            }
        },

        poll() {
            this.events.forEach(({ query, handler, state }) => {
                const isActive = this.active(query);
                if (isActive && !state) {
                    handler();
                } else if (!isActive && state) {
                    // If previously active but now inactive, no action needed
                }
                // Update state
                state = isActive;
            });
        }
    };

    return {
        init: t.init.bind(t),
        on: t.on.bind(t),
        active: t.active.bind(t)
    };
})();

// Usage Example
breakpoints.init({
    small: [0, 599],
    medium: [600, 1199],
    large: [1200, 1799],
    xlarge: [1800, Infinity]
});

breakpoints.on('>=medium', () => console.log('Medium or larger screen'));
