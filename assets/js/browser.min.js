/* browser.js v1.0 | @ajlkn | MIT licensed */
const browser = (function() {
    "use strict";

    const e = {
        name: null,
        version: null,
        os: null,
        osVersion: null,
        touch: null,
        mobile: null,
        _canUse: null,

        canUse(feature) {
            if (!this._canUse) {
                this._canUse = document.createElement('div');
            }
            const style = this._canUse.style;
            const prefix = feature.charAt(0).toUpperCase() + feature.slice(1);
            return feature in style || 
                   `Moz${prefix}` in style || 
                   `Webkit${prefix}` in style || 
                   `O${prefix}` in style || 
                   `ms${prefix}` in style;
        },

        init() {
            const ua = navigator.userAgent;
            const userAgentData = navigator.userAgentData || {};
            let browserName = 'other';
            let browserVersion = 0;

            const browserPatterns = [
                ["firefox", /Firefox\/([0-9\.]+)/],
                ["bb", /BlackBerry.+Version\/([0-9\.]+)/],
                ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
                ["opera", /OPR\/([0-9\.]+)/],
                ["opera", /Opera\/([0-9\.]+)/],
                ["edge", /Edge\/([0-9\.]+)/],
                ["safari", /Version\/([0-9\.]+).+Safari/],
                ["chrome", /Chrome\/([0-9\.]+)/],
                ["ie", /MSIE ([0-9]+)/],
                ["ie", /Trident\/.+rv:([0-9]+)/]
            ];

            for (const [name, regex] of browserPatterns) {
                if (ua.match(regex)) {
                    browserName = name;
                    browserVersion = parseFloat(RegExp.$1);
                    break;
                }
            }

            e.name = browserName;
            e.version = browserVersion;

            let osName = 'other';
            let osVersion = 0;

            const osPatterns = [
                ["ios", /([0-9_]+) like Mac OS X/, e => e.replace("_", ".").replace("_", "")],
                ["ios", /CPU like Mac OS X/, () => 0],
                ["wp", /Windows Phone ([0-9\.]+)/, null],
                ["android", /Android ([0-9\.]+)/, null],
                ["mac", /Macintosh.+Mac OS X ([0-9_]+)/, e => e.replace("_", ".").replace("_", "")],
                ["windows", /Windows NT ([0-9\.]+)/, null],
                ["bb", /BlackBerry.+Version\/([0-9\.]+)/, null],
                ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/, null],
                ["linux", /Linux/, null],
                ["bsd", /BSD/, null],
                ["unix", /X11/, null]
            ];

            for (const [name, regex, versionParser] of osPatterns) {
                if (ua.match(regex)) {
                    osName = name;
                    osVersion = versionParser ? versionParser(RegExp.$1) : parseFloat(RegExp.$1);
                    break;
                }
            }

            e.os = osName;
            e.osVersion = osVersion;

            e.touch = e.os === 'wp' ? navigator.msMaxTouchPoints > 0 : 'ontouchstart' in window;
            e.mobile = ['wp', 'android', 'ios', 'bb'].includes(e.os);
        }
    };

    e.init();
    return e;
})();

!function(global, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        global.browser = factory();
    }
}(this, function() {
    return browser;
});
